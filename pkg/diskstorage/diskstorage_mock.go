// Code generated by MockGen. DO NOT EDIT.
// Source: diskstorage.go

// Package diskstorage is a generated GoMock package.
package diskstorage

import (
	bytes "bytes"
	context "context"
	http "net/http"
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// GoMockDiskStorage is a mock of DiskStorage interface.
type GoMockDiskStorage struct {
	ctrl     *gomock.Controller
	recorder *GoMockDiskStorageMockRecorder
}

// GoMockDiskStorageMockRecorder is the mock recorder for GoMockDiskStorage.
type GoMockDiskStorageMockRecorder struct {
	mock *GoMockDiskStorage
}

// NewGoMockDiskStorage creates a new mock instance.
func NewGoMockDiskStorage(ctrl *gomock.Controller) *GoMockDiskStorage {
	mock := &GoMockDiskStorage{ctrl: ctrl}
	mock.recorder = &GoMockDiskStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *GoMockDiskStorage) EXPECT() *GoMockDiskStorageMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *GoMockDiskStorage) Delete(filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *GoMockDiskStorageMockRecorder) Delete(filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*GoMockDiskStorage)(nil).Delete), filePath)
}

// Download mocks base method.
func (m *GoMockDiskStorage) Download(ctx context.Context, targetURL, filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", ctx, targetURL, filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Download indicates an expected call of Download.
func (mr *GoMockDiskStorageMockRecorder) Download(ctx, targetURL, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*GoMockDiskStorage)(nil).Download), ctx, targetURL, filePath)
}

// GetBuffer mocks base method.
func (m *GoMockDiskStorage) GetBuffer() *bytes.Buffer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuffer")
	ret0, _ := ret[0].(*bytes.Buffer)
	return ret0
}

// GetBuffer indicates an expected call of GetBuffer.
func (mr *GoMockDiskStorageMockRecorder) GetBuffer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuffer", reflect.TypeOf((*GoMockDiskStorage)(nil).GetBuffer))
}

// Write mocks base method.
func (m *GoMockDiskStorage) Write(chunk []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", chunk)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *GoMockDiskStorageMockRecorder) Write(chunk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*GoMockDiskStorage)(nil).Write), chunk)
}

// WriteFile mocks base method.
func (m *GoMockDiskStorage) WriteFile(filePath string, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", filePath, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile.
func (mr *GoMockDiskStorageMockRecorder) WriteFile(filePath, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*GoMockDiskStorage)(nil).WriteFile), filePath, perm)
}

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHTTPClient) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHTTPClientMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClient)(nil).Do), req)
}
